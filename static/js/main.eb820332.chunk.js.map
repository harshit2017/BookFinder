{"version":3,"sources":["components/loader/loader.js","components/searchBox/search.js","components/booklist/booklist.js","App.js","serviceWorker.js","index.js","components/loader/giphy.gif"],"names":["Loader","react_default","a","createElement","src","loader","alt","style","width","marginLeft","marginTop","Search","_ref","message","Booklist","books","className","map","book","volumeInfo","imageLinks","smallThumbnail","title","authors","publisher","href","infoLink","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","isFetched","items","name","submit","bind","assertThisInitialized","query","_this2","fetch","concat","then","response","json","setState","totalItems","console","log","e","refs","value","preventDefault","getBooks","focus","_this$state","search","onSubmit","type","ref","placeholder","size","required","trim","id","booklist","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.eb820332.chunk.js","sourcesContent":["import React from 'react'\r\nimport loader from './giphy.gif'\r\n\r\nconst Loader = () => (\r\n    <img src={loader} alt=\"loader\" style={{ width: 150, marginLeft: '45%', marginTop: 20 }}></img>\r\n)\r\n\r\nexport default Loader","import React from 'react'\r\n\r\nconst Search = ({ message }) =>\r\n    <h3>{message}</h3>\r\n\r\nexport default Search","import React from 'react'\r\n\r\nconst Booklist = ({ books }) => (\r\n    <div className='book-list'>{books.map((book) =>\r\n        <div className='book'>\r\n            <img alt='Book' src={(book.volumeInfo.imageLinks)?(book.volumeInfo.imageLinks.smallThumbnail):''} ></img>\r\n            <h4>{book.volumeInfo.title}</h4>\r\n            <p>By: {book.volumeInfo.authors}</p>\r\n            <p>Published By: {book.volumeInfo.publisher}</p>\r\n            <a href={book.volumeInfo.infoLink}><button>Read More</button></a></div>\r\n    )}\r\n    </div>\r\n)\r\n\r\nexport default Booklist","import React, { Component } from 'react';\nimport fetch from 'isomorphic-fetch';\nimport Loader from './components/loader/loader'\nimport Search from './components/searchBox/search'\nimport Booklist from './components/booklist/booklist'\nimport './App.css';\n\nclass App extends Component {\n\n  constructor() {\n    super()\n    this.submit = this.submit.bind(this)\n  }\n  state = {\n    books: [],\n    isFetched: false,\n    items: 0,\n    name: ''\n  }\n\n\n  getBooks(query) {\n    fetch(`https://www.googleapis.com/books/v1/volumes?q=${query}`)\n      .then(response => response.json())\n      .then(json => this.setState({ books: json.items, isFetched: false, items: json.totalItems }))\n      console.log(this.state);\n  }\n\n  submit(e) {\n    const { query } = this.refs\n    this.setState({ isFetched: true, name: query.value })\n    e.preventDefault()\n    this.getBooks(query.value)\n    query.value = ''\n    query.focus()\n  }\n\n  render() {\n    const { books, isFetched, name, items } = this.state\n    return (\n      <div className=\"App\">\n        <div className=\"header\">\n          <Search message=\"BOOK FINDER\" />\n          <form className=\"form\" onSubmit={this.submit}>\n            <input type=\"search\" ref=\"query\" placeholder=\"Search by book title or author\" size=\"60\" required />\n            <button>Search</button>\n          </form>\n\n          {\n            !isFetched && items === 0 && name.trim() === '' && <p id=\"msg\">Nothing Here Yet! Try searching for a book</p>\n          }\n\n          {\n            !isFetched && items === 0 && name.trim() !== '' && <p id=\"msg\">Nothing Found! Try Another Query</p>\n          }\n\n        </div>\n\n\n        {\n          isFetched && <Loader />\n        }\n\n        {\n          !isFetched && items !== 0 && <Booklist books={books} />\n        }\n      </div >\n\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/giphy.4cc848b5.gif\";"],"sourceRoot":""}